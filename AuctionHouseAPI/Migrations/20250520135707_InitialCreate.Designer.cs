// <auto-generated />
using System;
using AuctionHouseAPI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AuctionHouseAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250520135707_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AuctionHouseAPI.Models.Auction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Auctions");
                });

            modelBuilder.Entity("AuctionHouseAPI.Models.AuctionItem", b =>
                {
                    b.Property<int>("AuctionId")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AuctionId");

                    b.HasIndex("CategoryId");

                    b.ToTable("AuctionItems");
                });

            modelBuilder.Entity("AuctionHouseAPI.Models.AuctionItemTag", b =>
                {
                    b.Property<int>("AuctionItemId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.HasKey("AuctionItemId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ItemTags");
                });

            modelBuilder.Entity("AuctionHouseAPI.Models.AuctionOptions", b =>
                {
                    b.Property<int>("AuctionId")
                        .HasColumnType("integer");

                    b.Property<bool>("AllowBuyItNow")
                        .HasColumnType("boolean");

                    b.Property<decimal>("BuyItNowPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("FinishDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIncreamentalOnLastMinuteBid")
                        .HasColumnType("boolean");

                    b.Property<int>("MinimumOutbid")
                        .HasColumnType("integer");

                    b.Property<int>("MinutesToIncrement")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("StartingPrice")
                        .HasColumnType("numeric");

                    b.HasKey("AuctionId");

                    b.ToTable("AuctionOptions");
                });

            modelBuilder.Entity("AuctionHouseAPI.Models.Bid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<int>("AuctionId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PlacedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.HasIndex("UserId");

                    b.ToTable("Bids");
                });

            modelBuilder.Entity("AuctionHouseAPI.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("AuctionHouseAPI.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("AuctionHouseAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AuctionHouseAPI.Models.Auction", b =>
                {
                    b.HasOne("AuctionHouseAPI.Models.User", "Owner")
                        .WithMany("Auctions")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("AuctionHouseAPI.Models.AuctionItem", b =>
                {
                    b.HasOne("AuctionHouseAPI.Models.Auction", "Auction")
                        .WithOne("Item")
                        .HasForeignKey("AuctionHouseAPI.Models.AuctionItem", "AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuctionHouseAPI.Models.Category", "Category")
                        .WithMany("AuctionItems")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Auction");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("AuctionHouseAPI.Models.AuctionItemTag", b =>
                {
                    b.HasOne("AuctionHouseAPI.Models.AuctionItem", "AuctionItem")
                        .WithMany("Tags")
                        .HasForeignKey("AuctionItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuctionHouseAPI.Models.Tag", "Tag")
                        .WithMany("AuctionItems")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuctionItem");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("AuctionHouseAPI.Models.AuctionOptions", b =>
                {
                    b.HasOne("AuctionHouseAPI.Models.Auction", "Auction")
                        .WithOne("Options")
                        .HasForeignKey("AuctionHouseAPI.Models.AuctionOptions", "AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auction");
                });

            modelBuilder.Entity("AuctionHouseAPI.Models.Bid", b =>
                {
                    b.HasOne("AuctionHouseAPI.Models.Auction", "Auction")
                        .WithMany("Bids")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuctionHouseAPI.Models.User", "User")
                        .WithMany("Bids")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Auction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuctionHouseAPI.Models.Auction", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("Item");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("AuctionHouseAPI.Models.AuctionItem", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("AuctionHouseAPI.Models.Category", b =>
                {
                    b.Navigation("AuctionItems");
                });

            modelBuilder.Entity("AuctionHouseAPI.Models.Tag", b =>
                {
                    b.Navigation("AuctionItems");
                });

            modelBuilder.Entity("AuctionHouseAPI.Models.User", b =>
                {
                    b.Navigation("Auctions");

                    b.Navigation("Bids");
                });
#pragma warning restore 612, 618
        }
    }
}
